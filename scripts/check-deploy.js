#!/usr/bin/env node

/**
 * Script de verifica√ß√£o para debug do processo de deploy
 */

const fs = require('fs');
const path = require('path');

console.log('üîç Verifica√ß√£o do ambiente de deploy\n');

// Verificar vari√°veis de ambiente
console.log('üåç Vari√°veis de ambiente:');
console.log(`   NODE_ENV: ${process.env.NODE_ENV || 'n√£o definido'}`);
console.log(`   GITHUB_PAGES: ${process.env.GITHUB_PAGES || 'n√£o definido'}`);
console.log(`   GITHUB_ACTIONS: ${process.env.GITHUB_ACTIONS || 'n√£o definido'}`);

// Verificar arquivos de configura√ß√£o
console.log('\n‚öôÔ∏è  Arquivos de configura√ß√£o:');
const configFiles = ['next.config.ts', 'next.config.js', 'package.json'];
configFiles.forEach(file => {
  if (fs.existsSync(file)) {
    console.log(`   ‚úÖ ${file} existe`);
  } else {
    console.log(`   ‚ùå ${file} n√£o encontrado`);
  }
});

// Verificar estrutura do projeto
console.log('\nüìÅ Estrutura do projeto:');
const importantDirs = ['src', 'public', '.next', 'out', 'dist'];
importantDirs.forEach(dir => {
  if (fs.existsSync(dir)) {
    const files = fs.readdirSync(dir);
    console.log(`   ‚úÖ ${dir}/ (${files.length} itens)`);
  } else {
    console.log(`   ‚ùå ${dir}/ n√£o existe`);
  }
});

// Verificar package.json scripts
console.log('\nüìã Scripts dispon√≠veis:');
try {
  const packageJson = JSON.parse(fs.readFileSync('package.json', 'utf8'));
  const scripts = packageJson.scripts || {};
  Object.keys(scripts).forEach(script => {
    console.log(`   üìú ${script}: ${scripts[script]}`);
  });
} catch (error) {
  console.log('   ‚ùå Erro ao ler package.json');
}

// Verificar se h√° conflitos na configura√ß√£o do Next.js
console.log('\nüîß Verifica√ß√£o da configura√ß√£o Next.js:');
try {
  // Simular as inje√ß√µes do GitHub Actions
  const nextConfigContent = fs.readFileSync('next.config.ts', 'utf8');
  console.log('   ‚úÖ next.config.ts lido com sucesso');
  
  // Verificar se h√° configura√ß√µes que podem causar conflito
  if (nextConfigContent.includes('basePath')) {
    console.log('   ‚ö†Ô∏è  basePath detectado na configura√ß√£o');
  }
  if (nextConfigContent.includes('images')) {
    console.log('   ‚ö†Ô∏è  configura√ß√£o de images detectada');
  }
  if (nextConfigContent.includes('output')) {
    console.log('   ‚úÖ configura√ß√£o de output detectada');
  }
  
} catch (error) {
  console.log(`   ‚ùå Erro ao verificar configura√ß√£o: ${error.message}`);
}

console.log('\n‚úÖ Verifica√ß√£o conclu√≠da!'); 